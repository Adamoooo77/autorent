from abc import ABC, abstractmethod
from datetime import date

# --- Absztrakt aut√≥ oszt√°ly ---
class Auto(ABC):
    def __init__(self, rendszam, tipus, berleti_dij):
        self.rendszam = rendszam
        self.tipus = tipus
        self.berleti_dij = berleti_dij

    @abstractmethod
    def auto_info(self):
        pass


# --- Szem√©lyaut√≥ oszt√°ly ---
class Szemelyauto(Auto):
    def __init__(self, rendszam, tipus, berleti_dij, ulesek_szama):
        super().__init__(rendszam, tipus, berleti_dij)
        self.ulesek_szama = ulesek_szama

    def auto_info(self):
        return f"Szem√©lyaut√≥ | Rendsz√°m: {self.rendszam}, T√≠pus: {self.tipus}, √úl√©sek: {self.ulesek_szama}, D√≠j: {self.berleti_dij} Ft/nap"


# --- Teheraut√≥ oszt√°ly ---
class Teherauto(Auto):
    def __init__(self, rendszam, tipus, berleti_dij, teherbiras_kg):
        super().__init__(rendszam, tipus, berleti_dij)
        self.teherbiras_kg = teherbiras_kg

    def auto_info(self):
        return f"Teheraut√≥ | Rendsz√°m: {self.rendszam}, T√≠pus: {self.tipus}, Teherb√≠r√°s: {self.teherbiras_kg} kg, D√≠j: {self.berleti_dij} Ft/nap"


# --- B√©rl√©s oszt√°ly ---
class Berles:
    def __init__(self, auto, datum: date):
        self.auto = auto
        self.datum = datum

    def __str__(self):
        return f"{self.auto.rendszam} | {self.auto.tipus} | {self.datum} | {self.auto.berleti_dij} Ft"


# --- Aut√≥k√∂lcs√∂nz≈ë oszt√°ly ---
class Autokolcsonzo:
    def __init__(self, nev):
        self.nev = nev
        self.autok = []
        self.berlesek = []

    def auto_hozzaadas(self, auto):
        self.autok.append(auto)

    def auto_berlese(self, rendszam, datum):
        auto = next((a for a in self.autok if a.rendszam == rendszam), None)
        if not auto:
            return "‚ùå Nincs ilyen rendsz√°m√∫ aut√≥."

        if any(b.auto.rendszam == rendszam and b.datum == datum for b in self.berlesek):
            return "‚ùå Az aut√≥ m√°r b√©rl√©s alatt √°ll ezen a napon."

        uj_berles = Berles(auto, datum)
        self.berlesek.append(uj_berles)
        return f"‚úÖ B√©rl√©s sikeres. √År: {auto.berleti_dij} Ft"

    def berles_lemondas(self, rendszam, datum):
        for berles in self.berlesek:
            if berles.auto.rendszam == rendszam and berles.datum == datum:
                self.berlesek.remove(berles)
                return "‚úÖ B√©rl√©s lemondva."
        return "‚ùå Nem tal√°lhat√≥ ilyen b√©rl√©s."

    def listaz_berlesek(self):
        if not self.berlesek:
            return "‚ÑπÔ∏è Nincsenek akt√≠v b√©rl√©sek."
        return "\n".join(str(b) for b in self.berlesek)

    def listaz_autok(self):
        return "\n".join(a.auto_info() for a in self.autok)


# --- Konzolos felhaszn√°l√≥i interf√©sz ---
def main():
    kolcsonzo = Autokolcsonzo("CityCar Rent")

    # El≈ëre felt√∂lt√∂tt aut√≥k
    kolcsonzo.auto_hozzaadas(Szemelyauto("ABC123", "Toyota Corolla", 10000, 5))
    kolcsonzo.auto_hozzaadas(Teherauto("DEF456", "Ford Transit", 15000, 1200))
    kolcsonzo.auto_hozzaadas(Szemelyauto("GHI789", "VW Golf", 11000, 5))

    # El≈ëre felt√∂lt√∂tt b√©rl√©sek
    kolcsonzo.auto_berlese("ABC123", date(2025, 4, 13))
    kolcsonzo.auto_berlese("DEF456", date(2025, 4, 14))
    kolcsonzo.auto_berlese("GHI789", date(2025, 4, 15))
    kolcsonzo.auto_berlese("ABC123", date(2025, 4, 16))

    while True:
        print("\n--- AUT√ìK√ñLCS√ñNZ≈ê RENDSZER ---")
        print("1. Aut√≥k list√°z√°sa")
        print("2. Aut√≥ b√©rl√©se")
        print("3. B√©rl√©s lemond√°sa")
        print("4. Aktu√°lis b√©rl√©sek list√°z√°sa")
        print("0. Kil√©p√©s")
        valasz = input("V√°laszt√°s: ")

        if valasz == "1":
            print("\n-- El√©rhet≈ë aut√≥k --")
            print(kolcsonzo.listaz_autok())

        elif valasz == "2":
            rendszam = input("Rendsz√°m: ").upper()
            datum = input("D√°tum (√â√â√â√â-HH-NN): ")
            try:
                ev, ho, nap = map(int, datum.split("-"))
                datum_obj = date(ev, ho, nap)
                print(kolcsonzo.auto_berlese(rendszam, datum_obj))
            except ValueError:
                print("‚ùå Hib√°s d√°tumform√°tum.")

        elif valasz == "3":
            rendszam = input("Rendsz√°m: ").upper()
            datum = input("D√°tum (√â√â√â√â-HH-NN): ")
            try:
                ev, ho, nap = map(int, datum.split("-"))
                datum_obj = date(ev, ho, nap)
                print(kolcsonzo.berles_lemondas(rendszam, datum_obj))
            except ValueError:
                print("‚ùå Hib√°s d√°tumform√°tum.")

        elif valasz == "4":
            print("\n-- Aktu√°lis b√©rl√©sek --")
            print(kolcsonzo.listaz_berlesek())

        elif valasz == "0":
            print("üëã Viszl√°t!")
            break

        else:
            print("‚ùó √ârv√©nytelen opci√≥.")


if __name__ == "__main__":
    main()
